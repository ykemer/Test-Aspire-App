@page "/admin/course/{courseId:guid}"
@using Aspire_App.Web.Contracts.Requests.Courses
@using Aspire_App.Web.Models.Courses
@using Aspire_App.Web.Services.Courses
@attribute [Authorize]

@rendermode InteractiveServer

@attribute [StreamRendering()]
@attribute [OutputCache(Duration = 5)]

@inject ICoursesApiService CoursesApiService
<PageTitle>Courses</PageTitle>

<h1>Courses</h1>


@if (_course == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h3>@_course.Name</h3>
    <h4>@_course.Description</h4>
    if (_course.EnrolledStudents!.Count == 0)
    {
        <p>
            <em>No students enrolled.</em>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Name</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var student in _course.EnrolledStudents!)
            {
                <tr>
                    <td>@student.FirstName @student.LastName</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => LeaveCourse(student.Id)">Remove</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}


@code {
    [Parameter] public Guid CourseId { get; set; }
    private CourseResponse? _course;

    protected override async Task OnInitializedAsync()
    {
        await GetCourses();
    }
    
    private async Task GetCourses()
    {
        _course = await CoursesApiService.GetCourse(CourseId);
    }
    
    private async Task LeaveCourse(Guid studentId)
   
    {
        await CoursesApiService.LeaveCourseByAdmin(new ChangeEnrollmentForTheCourseByAdmin
        {
            CourseId = CourseId,
            StudentId = studentId
        });
        await GetCourses();
    }

  

}