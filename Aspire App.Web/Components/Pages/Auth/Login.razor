@page "/login"

@using Aspire_App.Web.Services.Auth
@using global::Contracts.Auth.Requests
@rendermode InteractiveServer

@inject IAuthenticationService AuthenticationService;
@inject NavigationManager NavigationManager;

<h3>Login</h3>

<fieldset disabled="@(expiration is not null)">
    <EditForm Model="@UserLoginForm" OnValidSubmit="SubmitAsync" FormName="loginForm">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="Email">Email:</label>
            <InputText id="Email" class="form-control" @bind-Value="UserLoginForm.Email"/>
        </div>

        <div class="form-group">
            <label for="Password">Password:</label>
            <InputText id="Password" type="password" class="form-control" @bind-Value="UserLoginForm.Password"/>
        </div>
        <br/>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
</fieldset>

@if (expiration is not null)
{
    <p>You are logged in until @expiration?.ToLongTimeString()</p>
}

@if (errorMessage is not null)
{
    <p class="error">@errorMessage</p>
}

@code {
    [SupplyParameterFromForm] public UserLoginRequest UserLoginForm { get; set; }

    private DateTime? expiration;
    private string? errorMessage;

    protected override Task OnInitializedAsync()
    {
        UserLoginForm ??= new UserLoginRequest();
        return base.OnInitializedAsync();
    }

    private async Task SubmitAsync()
    {
        try
        {
            expiration = await AuthenticationService.LoginAsync(UserLoginForm);
            errorMessage = null;
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            expiration = null;
            errorMessage = ex.Message;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

}