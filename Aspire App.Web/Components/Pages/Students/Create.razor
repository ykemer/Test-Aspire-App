@page "/students/create"
@using System.ComponentModel.DataAnnotations

@attribute [StreamRendering(true)]

@inject StudentApiClient StudentsApi

<PageTitle>Create student</PageTitle>

<h3>Create Student</h3>

<EditForm Model="studentForm" OnValidSubmit="HandleValidSubmit" FormName="CreateStudentForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value="studentForm.FirstName" />
    </div>

    <div class="form-group">
        <label for="lastSurname">Last Surname:</label>
        <InputText id="lastSurname" class="form-control" @bind-Value="studentForm.LastName" />
    </div>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="studentForm.Email" />
    </div>

    <div class="form-group">
        <label for="dateOfBirth">Date of Birth:</label>
        <InputDate id="dateOfBirth" class="form-control" @bind-Value="studentForm.DateOfBirth" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
    
 

    [SupplyParameterFromForm]
    public StudentForm studentForm { get; set; }

    protected override Task OnInitializedAsync()
    {
        studentForm ??= new();
        return base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        var newStudent = new StudentListItem(studentForm.FirstName, studentForm.LastName, studentForm.Email, studentForm.DateOfBirth);
        await StudentsApi.CreateStudent(newStudent);
        studentForm = new StudentForm(); // reset the form
    }

    public class StudentForm
    {
        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [DataType(DataType.Date)]
        public DateTime DateOfBirth { get; set; }

        [Range(18, 80, ErrorMessage = "Age must be between 18 and 80.")]
        public int Age => DateTime.Today.Year - DateOfBirth.Year;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var age = DateTime.Today.Year - DateOfBirth.Year;
            if (DateOfBirth.Date > DateTime.Today.AddYears(-age)) age--;

            if (age < 18 || age > 90)
            {
                yield return new ValidationResult(
                    "Age must be between 18 and 90 years",
                    new[] { nameof(DateOfBirth) });
            }
        }
    }
}