@page "/admin/course/enrollments/{courseId:guid}"
@using Aspire_App.Web.Services.Courses
@using Contracts.Courses.Requests
@using Contracts.Courses.Responses
@using Contracts.Enrollments.Responses
@attribute [Authorize]

@rendermode InteractiveServer

@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]

@inject ICoursesApiService CoursesApiService
<PageTitle>Courses</PageTitle>

<h1>Courses</h1>


@if (_course == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <h3>@_course.Name</h3>
  <h4>@_course.Description</h4>
  if (_course.EnrollmentsCount == 0)
  {
    <p>
      <em>No students enrolled.</em>
    </p>
  }
  else if (_enrollments == null)
  {
    <p>
      <em>Loading...</em>
    </p>
  }
  else
  {
    <table class="table">
      <thead>
      <tr>
        <th>Name</th>
        <th>Enrolled</th>
        <th></th>
      </tr>
      </thead>
      <tbody>
      @foreach (var student in _enrollments)
      {
        <tr>
          <td>@student.FirstName @student.LastName</td>
          <td>@student.EnrollmentDateTime.ToString("dd/MM/yyyy hh:mm")</td>
          <td>
            <button class="btn btn-primary" @onclick="() => LeaveCourse(student.StudentId)">Remove</button>
          </td>
        </tr>
      }
      </tbody>
    </table>
  }
}


@code {
  [Parameter] public Guid CourseId { get; set; }
  private CourseResponse? _course;
  private List<EnrollmentResponse>? _enrollments;

  protected override async Task OnInitializedAsync()
  {
    await GetCourses();
  }

  private async Task GetCourses()
  {
    _course = await CoursesApiService.GetCourse(CourseId);
    if (_course.EnrollmentsCount > 0)
    {
      _enrollments = await CoursesApiService.GetCourseEnrollments(CourseId);
    }
  }

  private async Task LeaveCourse(string studentId)

  {
    await CoursesApiService.LeaveCourseByAdmin(new ChangeCourseEnrollmentAdminRequest
    {
      CourseId = CourseId,
      StudentId = studentId
    });
    await GetCourses();
  }


}