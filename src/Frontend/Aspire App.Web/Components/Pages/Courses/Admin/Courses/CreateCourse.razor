@page "/admin/courses/create"
@using Aspire_App.Web.Exceptions
@using Aspire_App.Web.Helpers
@using Aspire_App.Web.Services.Courses
@using Contracts.Courses.Requests
@using Contracts.Courses.Requests.Courses
@rendermode InteractiveServer

@inject ICoursesApiService CoursesApiService
@inject NavigationManager NavigationManager;

<div class="container my-4">
  <div class="row justify-content-center">
    <div class="col-12 col-lg-8">
      <div class="card shadow-sm">
        <div class="card-body p-4">
          <h3 class="card-title mb-3">Create course</h3>

          @if (_successMessage is not null)
          {
            <div class="alert alert-success" role="alert">@_successMessage</div>
          }

          @if (_errorMessage is not null)
          {
            <div class="alert alert-danger" role="alert">@_errorMessage</div>
          }

          <EditForm EditContext="_editContext" OnValidSubmit="SubmitAsync" FormName="createCourseForm">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="row g-3">
              <div class="col-12">
                <label for="Name" class="form-label">Name</label>
                <InputText id="Name" class="form-control" @bind-Value="createCourseForm.Name"/>
                <ValidationMessage For="@(() => createCourseForm.Name)"/>
              </div>
              <div class="col-12">
                <label for="Description" class="form-label">Description</label>
                <InputText id="Description" class="form-control" @bind-Value="createCourseForm.Description"/>
                <ValidationMessage For="@(() => createCourseForm.Description)"/>
              </div>
            </div>

            <button type="submit" class="btn btn-primary mt-4">Create</button>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
</div>

@code {

  public CreateCourseRequest createCourseForm;
  private EditContext _editContext;
  private ValidationMessageStore _messageStore;

  private string? _errorMessage;
  private string? _successMessage;

  protected override void OnInitialized()
  {
    createCourseForm = new CreateCourseRequest();
    _editContext = new EditContext(createCourseForm);
    _messageStore = new ValidationMessageStore(_editContext);
    _editContext.OnFieldChanged += EditContext_OnFieldChanged;
  }


  private async Task SubmitAsync()
  {
    try
    {
      await CoursesApiService.CreateCourse(createCourseForm);
      createCourseForm = new CreateCourseRequest();
      _errorMessage = null;
      _successMessage = "Course created successfully!";
      NavigationManager.NavigateTo("/admin/courses");
    }
    catch (ValidationException ex)
    {
      _messageStore.Clear();

      foreach (var error in ex.Errors)
      {
        var fieldIdentifier = new FieldIdentifier(createCourseForm, FrontendHelper.ToPascalCase(error.Key));
        _messageStore.Add(fieldIdentifier, error.Value);
      }

      _editContext.NotifyValidationStateChanged();
    }
    catch (Exception ex)
    {
      _successMessage = null;
      _errorMessage = ex.Message;
    }
  }

  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender) StateHasChanged();
    return Task.CompletedTask;
  }

  private void EditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
  {
    _messageStore.Clear(e.FieldIdentifier);
    _editContext.NotifyValidationStateChanged();
  }

  public void Dispose()
  {
    _editContext.OnFieldChanged -= EditContext_OnFieldChanged;
  }

}
