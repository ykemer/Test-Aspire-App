@page "/admin/courses/{courseId:guid}/classes/create"
@using Aspire_App.Web.Exceptions
@using Aspire_App.Web.Helpers
@using Aspire_App.Web.Services.Courses
@using Contracts.Courses.Requests.Classes
@using Contracts.Courses.Responses
@rendermode InteractiveServer

@inject ICoursesApiService CoursesApiService
@inject IClassesApiService ClassesApiService
@inject NavigationManager NavigationManager;

<div class="container my-4">
  <div class="row justify-content-center">
    <div class="col-12 col-lg-8">
      <div class="card shadow-sm">
        <div class="card-body p-4">
          @if (_course is not null)
          {
            <h3 class="card-title mb-3">Create class for @_course.Name</h3>
          }

          @if (_successMessage is not null)
          {
            <div class="alert alert-success" role="alert">@_successMessage</div>
          }

          @if (_errorMessage is not null)
          {
            <div class="alert alert-danger" role="alert">@_errorMessage</div>
          }

          @if (_editContext != null)
          {
            <EditForm EditContext="_editContext" OnValidSubmit="SubmitAsync" FormName="createClassForm">
              <DataAnnotationsValidator/>
              <ValidationSummary/>

              <div class="row g-3">
                <div class="col-md-6">
                  <label for="RegistrationDeadline" class="form-label">Registration Deadline</label>
                  <InputDate id="RegistrationDeadline" class="form-control" @bind-Value="createClassForm.RegistrationDeadline"/>
                  <ValidationMessage For="@(() => createClassForm.RegistrationDeadline)"/>
                </div>
                <div class="col-md-6">
                  <label for="CourseStartDate" class="form-label">Start Date</label>
                  <InputDate id="CourseStartDate" class="form-control" @bind-Value="createClassForm.CourseStartDate"/>
                  <ValidationMessage For="@(() => createClassForm.CourseStartDate)"/>
                </div>
                <div class="col-md-6">
                  <label for="CourseEndDate" class="form-label">End Date</label>
                  <InputDate id="CourseEndDate" class="form-control" @bind-Value="createClassForm.CourseEndDate"/>
                  <ValidationMessage For="@(() => createClassForm.CourseEndDate)"/>
                </div>
                <div class="col-md-6">
                  <label for="MaxStudents" class="form-label">Max Students</label>
                  <InputNumber id="MaxStudents" class="form-control" @bind-Value="createClassForm.MaxStudents"/>
                  <ValidationMessage For="@(() => createClassForm.MaxStudents)"/>
                </div>
              </div>

              <button type="submit" class="btn btn-primary mt-4">Create</button>
            </EditForm>
          }
        </div>
      </div>
    </div>
  </div>
</div>

@if (_successMessage is not null)
{
  <!-- Success shown above inside card -->
}

@if (_errorMessage is not null)
{
  <!-- Error shown above inside card -->
}

@code {
  [Parameter] public Guid CourseId { get; set; }
  public CreateClassRequest createClassForm;
  private CourseResponse? _course;
  private EditContext _editContext;
  private ValidationMessageStore _messageStore;

  private string? _errorMessage;
  private string? _successMessage;
  private bool _redirectTo404;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      _course = await CoursesApiService.GetCourse(CourseId);
      createClassForm = new CreateClassRequest
      {
        RegistrationDeadline = DateTime.UtcNow,
        CourseStartDate = DateTime.UtcNow,
        CourseEndDate = DateTime.UtcNow,
        MaxStudents = 0
      };
      _editContext = new EditContext(createClassForm);
      _messageStore = new ValidationMessageStore(_editContext);
      _editContext.OnFieldChanged += EditContext_OnFieldChanged;
    }
    catch (NotFoundException)
    {
      _redirectTo404 = true;
    }
  }

  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (_redirectTo404)
    {
      _redirectTo404 = false;
      NavigationManager.NavigateTo("/404", replace: true);
    }
    else if (firstRender)
    {
      StateHasChanged();
    }
    return Task.CompletedTask;
  }


  private async Task SubmitAsync()
  {
    try
    {
      await ClassesApiService.CreateClass(CourseId, createClassForm);
      _errorMessage = null;
      _successMessage = "Class created successfully!";
      NavigationManager.NavigateTo($"/admin/courses/{CourseId}/classes");
    }
    catch (ValidationException ex)
    {
      _messageStore.Clear();

      foreach (var error in ex.Errors)
      {
        var fieldIdentifier = new FieldIdentifier(createClassForm, FrontendHelper.ToPascalCase(error.Key));
        _messageStore.Add(fieldIdentifier, error.Value);
      }

      _editContext.NotifyValidationStateChanged();
    }
    catch (Exception ex)
    {
      _successMessage = null;
      _errorMessage = ex.Message;
    }
  }


  private void EditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
  {
    _messageStore.Clear(e.FieldIdentifier);
    _editContext.NotifyValidationStateChanged();
  }

  public void Dispose()
  {
    _editContext.OnFieldChanged -= EditContext_OnFieldChanged;
  }
}
