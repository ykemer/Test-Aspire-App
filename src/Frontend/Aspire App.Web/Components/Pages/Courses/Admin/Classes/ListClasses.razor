@page "/admin/courses/{courseId:guid}/classes"
@using Aspire_App.Web.Components.Shared
@using Aspire_App.Web.Services.Courses
@using Aspire_App.Web.Exceptions
@using Contracts.Common
@using Contracts.Courses.Responses
@attribute [Authorize]

@rendermode InteractiveServer

@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]

@inject ICoursesApiService CoursesApiService
@inject IClassesApiService ClassesApiService
@inject NavigationManager NavigationManager;

<PageTitle>Course "@(_course is not null ? _course.Name : "")" classes</PageTitle>

<div class="container my-4">
  @if (_course != null)
  {
    <div class="mb-3">
      <Breadcrumb>
        <BreadcrumbItem href="/courses">Courses</BreadcrumbItem>
        <BreadcrumbItem active>@_course.Name classes</BreadcrumbItem>
      </Breadcrumb>
    </div>
  }

  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="h4 mb-0">@(_course != null ? $"Course \"{_course.Name}\" classes" : "Classes")</h1>
    <NavLink href="@($"/admin/courses/{CourseId}/classes/create")" class="btn btn-primary">+ Create class</NavLink>
  </div>

  @if (_classes == null)
  {
    <div class="d-flex justify-content-center align-items-center py-5">
      <div class="spinner-border text-primary" role="status" aria-label="Loading classes"></div>
      <span class="ms-2 text-muted">Loading classes...</span>
    </div>
  }
  else if (_classes.Items.Count == 0)
  {
    <div class="card shadow-sm">
      <div class="card-body text-center py-5">
        <p class="text-muted mb-3">No classes found.</p>
        <NavLink href="@($"/admin/courses/{CourseId}/classes/create")" class="btn btn-primary">Create class</NavLink>
      </div>
    </div>
  }
  else
  {
    <div class="card shadow-sm">
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-striped table-hover align-middle mb-0">
            <thead class="table-light">
            <tr>
              <th style="width:18%">Registration deadline</th>
              <th style="width:18%">Start Date</th>
              <th style="width:18%">End date</th>
              <th style="width:12%">Max Students</th>
              <th style="width:14%">Enrolled</th>
              <th class="text-end" style="width:20%">Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var courseClass in _classes.Items)
            {
              <tr>
                <td>@courseClass.RegistrationDeadline.ToString("dd.MM.yyyy")</td>
                <td>@courseClass.CourseStartDate.ToString("dd.MM.yyyy")</td>
                <td>@courseClass.CourseEndDate.ToString("dd.MM.yyyy")</td>
                <td>@courseClass.MaxStudents</td>
                <td>
                  <span class="badge text-bg-secondary">@courseClass.EnrollmentsCount</span>
                </td>
                <td class="text-end">
                  <div class="btn-group" role="group" aria-label="Actions for class @courseClass.Id">
                    <NavLink href="@($"/admin/courses/{CourseId}/classes/{courseClass.Id}/enrollments")" class="btn btn-outline-info btn-sm">Students</NavLink>
                    <NavLink href="@($"/admin/courses/{courseClass.CourseId}/classes/{courseClass.Id}")" class="btn btn-outline-secondary btn-sm">Edit</NavLink>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => ShowDeleteConfirmation(courseClass.Id)">Delete</button>
                  </div>
                </td>
              </tr>
            }
            </tbody>
          </table>
        </div>
      </div>
      @if (_classes.TotalPages > 1)
      {
        <div class="card-footer bg-white">
          <div class="d-flex justify-content-center">
            <Pager records="_classes" ChangePage="GetClasses"/>
          </div>
        </div>
      }
    </div>
  }
</div>

@if (_showDeleteConfirmation)
{
  <Modal Title="Confirm Delete" OnConfirm="ConfirmDelete" OnCancel="CancelDelete">
    <p>Do you really want to delete this class?</p>
  </Modal>
}

@code {
  [Parameter] public Guid CourseId { get; set; }
  private PagedList<ClassListItemResponse>? _classes;
  private int Page { get; set; }
  private CourseResponse? _course;
  private bool _showDeleteConfirmation;
  private Guid _courseIdToDelete;
  private bool _redirectTo404;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      _course = await CoursesApiService.GetCourse(CourseId);
      await GetClasses();
    }
    catch (NotFoundException)
    {
      _redirectTo404 = true;
    }
  }

  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (_redirectTo404)
    {
      _redirectTo404 = false;
      NavigationManager.NavigateTo("/404", replace: true);
    }
    return Task.CompletedTask;
  }

  protected async Task GetClasses(int page = 1)
  {
    try
    {
      Page = page;
      _classes = null;
      _classes = await ClassesApiService.GetClassListAsync(CourseId.ToString(), page);
    }
    catch (NotFoundException)
    {
      _redirectTo404 = true;
      StateHasChanged();
    }
  }

  private void ShowDeleteConfirmation(Guid courseId)
  {
    _courseIdToDelete = courseId;
    _showDeleteConfirmation = true;
  }

  private async Task ConfirmDelete()
  {
    _showDeleteConfirmation = false;
    await ClassesApiService.DeleteClass(CourseId, _courseIdToDelete);
    await GetClasses();
  }

  private void CancelDelete()
  {
    _showDeleteConfirmation = false;
  }

}
