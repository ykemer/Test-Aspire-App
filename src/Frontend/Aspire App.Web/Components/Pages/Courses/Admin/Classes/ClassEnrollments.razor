@page "/admin/courses/{courseId:guid}/classes/{classId:guid}/enrollments"
@using Aspire_App.Web.Services.Courses
@using Aspire_App.Web.Exceptions
@using Contracts.Courses.Requests
@using Contracts.Courses.Requests.Enrollments
@using Contracts.Courses.Responses
@using Contracts.Enrollments.Responses
@attribute [Authorize]

@rendermode InteractiveServer

@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]

@inject ICoursesApiService CoursesApiService
@inject IClassesApiService ClassesApiService
@inject NavigationManager NavigationManager;

@if (_course is not null && _class is not null)
{
  <PageTitle>
    Course "@_course.Name" @_class.CourseStartDate enrollments
  </PageTitle>
}

<div class="container my-4">
  @if (_course is not null && _class is not null)
  {
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h1 class="h4 mb-0">Course "@_course.Name" @_class.CourseStartDate enrollments</h1>
      <NavLink href="@($"/admin/courses/{CourseId}/classes")" class="btn btn-outline-secondary btn-sm">Back to classes</NavLink>
    </div>
  }

  @if (_course == null)
  {
    <div class="d-flex justify-content-center align-items-center py-5">
      <div class="spinner-border text-primary" role="status" aria-label="Loading course"></div>
      <span class="ms-2 text-muted">Loading course...</span>
    </div>
  }
  else
  {
    <div class="card shadow-sm mb-3">
      <div class="card-body">
        <h3 class="h5 mb-1">@_course.Name</h3>
        <p class="text-muted mb-0">@_course.Description</p>
      </div>
    </div>

    @if (_course.TotalStudents == 0)
    {
      <div class="card shadow-sm">
        <div class="card-body text-center py-5">
          <p class="text-muted mb-0">No students enrolled.</p>
        </div>
      </div>
    }
    else if (_enrollments == null)
    {
      <div class="d-flex justify-content-center align-items-center py-5">
        <div class="spinner-border text-primary" role="status" aria-label="Loading enrollments"></div>
        <span class="ms-2 text-muted">Loading enrollments...</span>
      </div>
    }
    else
    {
      <div class="card shadow-sm">
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-striped table-hover align-middle mb-0">
              <thead class="table-light">
              <tr>
                <th style="width:60%">Student</th>
                <th style="width:40%">Enrolled</th>
              </tr>
              </thead>
              <tbody>
              @foreach (var student in _enrollments)
              {
                <tr>
                  <td>@student.FirstName @student.LastName</td>
                  <td>@student.EnrollmentDateTime.ToString("dd/MM/yyyy HH:mm")</td>
                </tr>
              }
              </tbody>
            </table>
          </div>
        </div>
      </div>
    }
  }
</div>

@code {
  [Parameter] public Guid CourseId { get; set; }
  [Parameter] public Guid ClassId { get; set; }
  private CourseResponse? _course;
  private ClassResponse? _class;
  private List<EnrollmentResponse>? _enrollments;
  private bool _redirectTo404;

  protected override async Task OnInitializedAsync()
  {
    await GetCourses();
  }

  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (_redirectTo404)
    {
      _redirectTo404 = false;
      NavigationManager.NavigateTo("/404", replace: true);
    }
    return Task.CompletedTask;
  }

  private async Task GetCourses()
  {
    try
    {
      _course = await CoursesApiService.GetCourse(CourseId);
      _class = await ClassesApiService.GetClass(CourseId, ClassId);
      if (_course.TotalStudents > 0)
      {
        _enrollments = await ClassesApiService.GetClassEnrollments(CourseId, ClassId);
      }
    }
    catch (NotFoundException)
    {
      _redirectTo404 = true;
      StateHasChanged();
    }
  }
}
