@page "/courses/{courseId:guid}/classes"
@using Aspire_App.Web.Components.Shared
@using Aspire_App.Web.Helpers
@using Aspire_App.Web.Services.Courses
@using Aspire_App.Web.Services.Hubs
@using Contracts.Common
@using Contracts.Courses.Responses
@using Contracts.Hub
@attribute [Authorize]

@rendermode InteractiveServer

@inject ICoursesApiService CoursesApiService
@inject IClassesApiService ClassesApiService
@inject IEnrollmentApiService EnrollmentApiService
@inject EnrollmentHubService EnrollmentHubService




<PageTitle>Course "@(_course is not null ? _course.Name : "")" classes</PageTitle>

<div class="container my-4">
  @if (_successMessage is not null)
  {
    <div class="alert alert-success" role="alert">@_successMessage</div>
  }

  @if (_errorMessage is not null)
  {
    <div class="alert alert-danger" role="alert">@_errorMessage</div>
  }

  @if (_course != null)
  {
    <div class="mb-3">
      <Breadcrumb>
        <BreadcrumbItem href="/courses">Courses</BreadcrumbItem>
        <BreadcrumbItem active>@_course.Name classes</BreadcrumbItem>
      </Breadcrumb>
    </div>
  }

  <h1 class="h4 mb-3">@(_course != null ? $"Course \"{_course.Name}\" classes" : "Classes")</h1>

  @if (!_isDataLoaded)
  {
    <div class="d-flex justify-content-center align-items-center py-5">
      <div class="spinner-border text-primary" role="status" aria-label="Loading classes"></div>
      <span class="ms-2 text-muted">Loading data...</span>
    </div>
  }
  else if (_classes is null || _classes.Items.Count == 0) // Проверяем загруженные данные
  {
    <div class="card shadow-sm">
      <div class="card-body text-center py-5">
        <p class="text-muted mb-0">No classes found.</p>
      </div>
    </div>
  }
  else
  {
    <div class="card shadow-sm">
      <div class="card-body p-0">
        <div class="table-responsive">
          <table class="table table-striped table-hover align-middle mb-0">
            <thead class="table-light">
            <tr>
              <th style="width:25%">Registration deadline</th>
              <th style="width:25%">Start Date</th>
              <th style="width:25%">End date</th>
              <th class="text-end" style="width:25%">Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var courseClass in _classes.Items)
            {
              var isLoading = _loadingClassId == courseClass.Id;
              <tr>
                <td>@courseClass.RegistrationDeadline.ToString("dd.MM.yyyy")</td>
                <td>@courseClass.CourseStartDate.ToString("dd.MM.yyyy")</td>
                <td>@courseClass.CourseEndDate.ToString("dd.MM.yyyy")</td>
                <td class="text-end">
                  @if (courseClass.IsUserEnrolled)
                  {
                    <button class="btn btn-outline-danger btn-sm" disabled="@isLoading"
                            @onclick="() => UpdateEnrollment(courseClass.Id, EnrollmentAction.Leave)">
                    @if (isLoading)
                    {
                      <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                      <span class="ms-1">Leaving...</span>
                    }
                    else
                    {
                      <span>Leave</span>
                    }
                    </button>
                  }
                  else
                  {
                    <button class="btn btn-outline-primary btn-sm" disabled="@isLoading"
                            @onclick="() => UpdateEnrollment(courseClass.Id, EnrollmentAction.Enroll)">
                    @if (isLoading)
                    {
                      <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                      <span class="ms-1">Enrolling...</span>
                    }
                    else
                    {
                      <span>Enroll</span>
                    }
                    </button>
                  }
                </td>
              </tr>
            }
            </tbody>
          </table>
        </div>
      </div>
      @if (_classes.TotalPages > 1)
      {
        <div class="card-footer bg-white">
          <div class="d-flex justify-content-center">
            <Pager records="_classes" ChangePage="GetClasses"/>
          </div>
        </div>
      }
    </div>
  }
</div>


@code {
  [Parameter] public Guid CourseId { get; set; }
  private PagedList<ClassListItemResponse>? _classes;
  private int Page { get; set; }
  private Guid? _loadingClassId;
  private CourseResponse? _course;
  private string? _errorMessage;
  private string? _successMessage;
  private bool _isDataLoaded = false;


  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      _course = await CoursesApiService.GetCourse(CourseId);
      await GetClasses();


      try
      {
        EnrollmentHubService.OnEnrollmentNotification -= HandleNotification;
        await EnrollmentHubService.StartConnectionAsync();
        EnrollmentHubService.OnEnrollmentNotification += HandleNotification;
      }
      catch (Exception ex)
      {
        Console.WriteLine($"SignalR connection failed: {ex.Message}");
      }

      _isDataLoaded = true;
      StateHasChanged();
    }
  }


  protected async Task GetClasses(int page = 1)
  {
    Page = page;
    _classes = null;
    _classes = await ClassesApiService.GetClassListAsync(CourseId.ToString(), page);
  }

  private async Task UpdateEnrollment(Guid classId, EnrollmentAction action)
  {
    _errorMessage = null;
    _successMessage = null;
    _loadingClassId = classId;
    if (action == EnrollmentAction.Enroll)
    {
      await EnrollmentApiService.EnrollToCourse(CourseId, classId);
    }
    else
    {
      await EnrollmentApiService.LeaveCourse(CourseId, classId);
    }
  }

  private void HandleNotification(EnrollmentMessage message)
  {
    if (message.MessageType == EnrollmentHubMessages.EnrollmentCreated ||
        message.MessageType == EnrollmentHubMessages.EnrollmentDeleted)
    {
      _successMessage = message.Message;
      _loadingClassId = null;
      _ = InvokeAsync(async () =>
      {
        await GetClasses(Page);
        StateHasChanged();
      });
    }
    else
    {
      _loadingClassId = null;
      _errorMessage = message.Message;
    }
  }

  public async ValueTask DisposeAsync()
  {
    EnrollmentHubService.OnEnrollmentNotification -= HandleNotification;
    await EnrollmentHubService.StopConnectionAsync();
  }

}
