@page "/courses"
@using Aspire_App.Web.Components.Shared
@using Aspire_App.Web.Services.Courses
@using Contracts.Common
@using Contracts.Courses.Responses
@attribute [Authorize]

@rendermode InteractiveServer

@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]

@inject ICoursesApiService CoursesApiService
<PageTitle>Courses</PageTitle>

<h1>Courses</h1>


@if (_courses == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else if (_courses.Items.Count == 0)
{
  <p>
    <em>No courses found.</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
      <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var course in _courses.Items)
    {
      var isLoading = _loadingCourseId == course.Id;
      <tr>
        <td>@course.Name</td>
        <td>@course.Description</td>
        <td>
          @if (course.IsUserEnrolled)
          {
            <button class="btn btn-danger" disabled="@isLoading" @onclick="() => LeaveCourse(course.Id)">
              @if (isLoading)
              {
                <div>
                  <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                  Leaving...
                </div>
              }
              else
              {
                <div>
                  Leave
                </div>
              }
            </button>
          }
          else
          {
            <button class="btn btn-primary" disabled="@isLoading" @onclick="() => EnrollCourse(course.Id)">
              @if (isLoading)
              {
                <div>
                  <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                  Enrolling...
                </div>
              }
              else
              {
                <div>Enroll</div>
              }
            </button>
          }
        </td>
      </tr>
    }
    </tbody>
  </table>

  @if (_courses.TotalPages > 1)
  {
    <Pager records="_courses" ChangePage="GetStudents"/>
  }
}


@code {
  private PagedList<CourseListItemResponse>? _courses;
  private int Page { get; set; }
  private Guid? _loadingCourseId = null;

  protected override async Task OnInitializedAsync()
  {
    await GetStudents();
  }

  protected async Task GetStudents(int page = 1)
  {
    Page = page;
    _courses = null;
    _courses = await CoursesApiService.GetCoursesListAsync(page);
  }

  private async Task EnrollCourse(Guid courseId)
  {
    _loadingCourseId = courseId;
    await CoursesApiService.EnrollToCourse(courseId);
    await GetStudents(Page);
    _loadingCourseId = null;
  }

  private async Task LeaveCourse(Guid courseId)
  {
    _loadingCourseId = courseId;
    await CoursesApiService.LeaveCourse(courseId);
    await GetStudents(Page);
    _loadingCourseId = null;
  }
}
