@page "/register"
@using Aspire_App.Web.Exceptions
@using Aspire_App.Web.Helpers
@using Aspire_App.Web.Services.Auth
@using Contracts.Users.Requests

@rendermode InteractiveServer

@inject IAuthenticationService AuthenticationService;
@inject NavigationManager NavigationManager;

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-12 col-sm-10 col-md-8 col-lg-7">
      <div class="card shadow-sm">
        <div class="card-body p-4">
          <h3 class="card-title mb-4 text-center">Registration</h3>

          @if (_errorMessage is not null)
          {
            <div class="alert alert-danger" role="alert">@_errorMessage</div>
          }

          @if (_successMessage is not null)
          {
            <div class="alert alert-success" role="alert">@_successMessage</div>
          }

          <fieldset disabled="@_isSubmitting">
            <EditForm EditContext="_editContext" OnValidSubmit="SubmitAsync" FormName="registerForm">
              <DataAnnotationsValidator/>

              <div class="row g-3">
                <div class="col-md-6">
                  <label for="Firstname" class="form-label">First name</label>
                  <InputText id="Firstname" class="form-control" @bind-Value="registerForm.FirstName"/>
                  <ValidationMessage For="@(() => registerForm.FirstName)"/>
                </div>

                <div class="col-md-6">
                  <label for="LastName" class="form-label">Last name</label>
                  <InputText id="LastName" class="form-control" @bind-Value="registerForm.LastName"/>
                  <ValidationMessage For="@(() => registerForm.LastName)"/>
                </div>

                <div class="col-12">
                  <label for="Email" class="form-label">Email</label>
                  <InputText id="Email" type="email" autocomplete="email" class="form-control" @bind-Value="registerForm.Email"/>
                  <ValidationMessage For="@(() => registerForm.Email)"/>
                </div>

                <div class="col-md-6">
                  <label for="Password" class="form-label">Password</label>
                  <InputText id="Password" type="password" autocomplete="new-password" class="form-control" @bind-Value="registerForm.Password"/>
                  <ValidationMessage For="@(() => registerForm.Password)"/>
                </div>

                <div class="col-md-6">
                  <label for="RepeatPassword" class="form-label">Repeat password</label>
                  <InputText id="RepeatPassword" type="password" autocomplete="new-password" class="form-control" @bind-Value="registerForm.RepeatPassword"/>
                  <ValidationMessage For="@(() => registerForm.RepeatPassword)"/>
                </div>

                <div class="col-md-6">
                  <label for="DateOfBirth" class="form-label">Date of birth</label>
                  <InputDate id="DateOfBirth" class="form-control" @bind-Value="registerForm.DateOfBirth"/>
                  <ValidationMessage For="@(() => registerForm.DateOfBirth)"/>
                </div>
              </div>

              <button type="submit" class="btn btn-primary w-100 mt-4" disabled="@_isSubmitting">
                @(_isSubmitting ? "Creating account..." : "Register")
              </button>
            </EditForm>
          </fieldset>
        </div>
      </div>
    </div>
  </div>
</div>

@code {

  //[SupplyParameterFromForm]
  public UserRegisterRequest registerForm { get; set; }
  private EditContext _editContext;
  private ValidationMessageStore _messageStore;

  private string? _errorMessage;
  private string? _successMessage;
  private bool _isSubmitting;

  protected override void OnInitialized()
  {
    registerForm = new UserRegisterRequest();
    _editContext = new EditContext(registerForm);
    _messageStore = new ValidationMessageStore(_editContext);
    _editContext.OnFieldChanged += EditContext_OnFieldChanged;
  }

  private async Task SubmitAsync()
  {
    _isSubmitting = true;
    _errorMessage = null;
    _successMessage = null;
    try
    {
      await AuthenticationService.RegisterAsync(registerForm);
      _successMessage = "Registration successful";
      registerForm = new UserRegisterRequest();
      _errorMessage = null;
      NavigationManager.NavigateTo("/");
    }
    catch (ValidationException ex)
    {
      _messageStore.Clear();

      // Add server-side validation errors to the ValidationMessageStore
      foreach (var error in ex.Errors)
      {
        var fieldIdentifier = new FieldIdentifier(registerForm, FrontendHelper.ToPascalCase(error.Key));
        _messageStore.Add(fieldIdentifier, error.Value);
      }

      // Notify the EditContext that the validation state has changed
      _editContext.NotifyValidationStateChanged();
    }
    catch (Exception ex)
    {
      _errorMessage = ex.Message;
    }
    finally
    {
      _isSubmitting = false;
      StateHasChanged();
    }
  }

  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      StateHasChanged();
    }

    return Task.CompletedTask;
  }

  private void EditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
  {
    // Clear all validation messages when any field changes to allow re-submission
    _messageStore.Clear();
    _editContext.NotifyValidationStateChanged();
  }

  public void Dispose()
  {
    _editContext.OnFieldChanged -= EditContext_OnFieldChanged;
  }
}
