@page "/login"
@using Aspire_App.Web.Exceptions
@using Aspire_App.Web.Helpers
@using Aspire_App.Web.Services.Auth
@using Contracts.Users.Requests
@rendermode InteractiveServer

@inject IAuthenticationService AuthenticationService;
@inject NavigationManager NavigationManager;

<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-12 col-sm-10 col-md-8 col-lg-6">
      <div class="card shadow-sm">
        <div class="card-body p-4">
          <h3 class="card-title mb-4 text-center">Login</h3>

          @if (_errorMessage is not null)
          {
            <div class="alert alert-danger" role="alert">@_errorMessage</div>
          }

          @if (_expiration is not null)
          {
            <div class="alert alert-success" role="alert">You are logged in until @_expiration?.ToLongTimeString()</div>
          }

          <fieldset disabled="@_isSubmitting">
            <EditForm EditContext="_editContext" OnValidSubmit="SubmitAsync" FormName="loginForm">
              <DataAnnotationsValidator/>
              <ValidationSummary/>

              <div class="mb-3">
                <label for="Email" class="form-label">Email</label>
                <InputText id="Email" type="email" autocomplete="username" class="form-control" @bind-Value="loginForm.Email"/>
                <ValidationMessage For="@(() => loginForm.Email)"/>
              </div>

              <div class="mb-3">
                <label for="Password" class="form-label">Password</label>
                <InputText id="Password" type="password" autocomplete="current-password" class="form-control" @bind-Value="loginForm.Password"/>
                <ValidationMessage For="@(() => loginForm.Password)"/>
              </div>

              <button type="submit" class="btn btn-primary w-100" disabled="@_isSubmitting">
                @(_isSubmitting ? "Signing in..." : "Login")
              </button>
            </EditForm>
          </fieldset>
        </div>
      </div>
    </div>
  </div>
</div>

@code {

  public UserLoginRequest loginForm { get; set; }

  private DateTime? _expiration;
  private string? _errorMessage;
  private bool _isSubmitting;

  private EditContext _editContext;
  private ValidationMessageStore _messageStore;

  protected override Task OnInitializedAsync()
  {
    loginForm = new UserLoginRequest();
    _editContext = new EditContext(loginForm);
    _messageStore = new ValidationMessageStore(_editContext);
    _editContext.OnFieldChanged += EditContext_OnFieldChanged;
    return base.OnInitializedAsync();
  }

  private async Task SubmitAsync()
  {
    _isSubmitting = true;
    _errorMessage = null;
    try
    {
      _expiration = await AuthenticationService.LoginAsync(loginForm);
      _errorMessage = null;
      NavigationManager.NavigateTo("/");
    }
    catch (ValidationException ex)
    {
      _messageStore.Clear();

      foreach (var error in ex.Errors)
      {
        var fieldIdentifier = new FieldIdentifier(loginForm, FrontendHelper.ToPascalCase(error.Key));
        _messageStore.Add(fieldIdentifier, error.Value);
      }

      _editContext.NotifyValidationStateChanged();
    }
    catch (Exception ex)
    {
      _expiration = null;
      _errorMessage = ex.Message;
    }
    finally
    {
      _isSubmitting = false;
      StateHasChanged();
    }
  }

  private void EditContext_OnFieldChanged(object? sender, FieldChangedEventArgs e)
  {
    // Clear all validation messages when any field changes to allow re-submission
    _messageStore.Clear();
    _editContext.NotifyValidationStateChanged();
  }

  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      StateHasChanged();
    }

    return Task.CompletedTask;
  }

  public void Dispose()
  {
    _editContext.OnFieldChanged -= EditContext_OnFieldChanged;
  }

}
